#!/bin/bash
# xx package manger
#

# change dir to xxmp-home
THIS_ROOT_HOME=$(pushd `dirname $0` >/dev/null; pwd; popd >/dev/null);
XXPM_HOME=$(pushd "$THIS_ROOT_HOME/../" >/dev/null; pwd; popd >/dev/null);
pushd "$XXPM_HOME"

XXPM_D_VBOX="$XXPM_HOME/vbox"
XXPM_D_OPT="$XXPM_HOME/opt"
XXPM_D_BIN="$XXPM_HOME/bin"
XXPM_F_ENV="$XXPM_HOME/xxpm.env"
XXPM_F_CONF="$XXPM_HOME/bin/src.conf"
XXPM_D_CONF="$XXPM_HOME/bin/src.conf.d"
XXPM_D_BUILD="$XXPM_HOME/.var/build"
XXPM_D_DOWNLOAD="$XXPM_HOME/.var/download"
XXPM_D_SRC_UNTAR="$XXPM_HOME/.var/untar"
XXPM_D_SRC_GIT="$XXPM_HOME/.var/git"
XXPM_D_INSTALL=$XXPM_D_OPT

# runtime src-dir build-dir
RT_D_SRC=
RT_D_BUILD=

PROJECT=


# *************************************************************
# 通用函数
# *************************************************************
# tarball(tar.gz, tar.bz2)
# git
function get_src_type()
{
    stype=""
    bname=$(basename "$1")
    echo $bname | grep ".tar.gz$"  &>/dev/null && stype=".tar.gz"
    echo $bname | grep ".tar.bz2$" &>/dev/null && stype=".tar.bz2"
    echo $bname | grep ".git$"     &>/dev/null && stype=".git"
    [ -n "$stype" ] && {
        echo $stype; return 0
    } || {
        return -1
    }
}

function verify_dir()
{
    if [ ! -d "$1" ]; then
        mkdir -p "$1"
    fi
}

function sub_verify_tarball()
{
    verify_dir "$XXPM_D_DOWNLOAD"
    local_src_tarball="$XXPM_D_DOWNLOAD/$2"
    if [ ! -f "$local_src_tarball" ]; then
        wget "$1" -F "$local_src_tarball"
    fi
    # untar with each tools(bunzip2 or gunzip)
    if [ -f "$local_src_tarball" ]; then
        verify_dir "$XXPM_D_SRC_UNTAR"
        stype=$(get_src_type "$local_src_tarball")
        case "$stype" in
            ".tar.gz")  tar -zxvf "$local_src_tarball" -C "$XXPM_D_SRC_UNTAR" ;;
            ".tar.bz2") tar -jxvf "$local_src_tarball" -C "$XXPM_D_SRC_UNTAR" ;;
        esac
        RT_D_SRC=$XXPM_D_SRC_UNTAR/$3
    else
        RT_D_SRC=""
    fi
}

function sub_verify_git()
{
    verify_dir "$XXPM_D_SRC_GIT"
    local_src_git_dir="$XXPM_D_SRC_GIT/$2"
    if [ ! -d "$local_src_git_dir" ]; then
        git clone "$1" "$local_src_git_dir"
    else
        echo "update PASS"
    fi
    RT_D_SRC=$local_src_git_dir
}

function verify_src()
{
    uri="$1"
    bname=$(basename "$uri")
    ename=$(get_src_type "$bname")
    if [ -z "$ename" ]; then
        echo "EMPTY src type and basename=${ename}"
        return -2
    fi
    prj_name=$(echo $bname | sed "s:$ename::g")
    echo "prj_name=$prj_name"
    case "$ename" in
        ".tar.gz"|".tar.bz2") sub_verify_tarball "$uri" "$bname" "$prj_name" ;;
        ".git") sub_verify_git "$uri" "$prj_name" ;;
        *)
            echo "NOT support the src type=${ename}"
            return -1
            ;;
    esac

    # 决策编译路径
    if [ -n "$BUILD_IN_SRC" ]; then
        RT_D_BUILD="$RT_D_SRC"
    else
        RT_D_BUILD="$XXPM_D_BUILD/$PROJECT-build"
    fi
    echo "--RT_D_SRC=$RT_D_SRC"
    echo "--RT_D_BUILD=$RT_D_BUILD"
    return 0
}

#
function verify_build_cmd()
{
    [ -n "$BUILD_CMD" ] && return 0;

    DEF_MAKE_BUILD_CMD="make"
    DEF_CMAKE_BUILD_CMD="cmake $RT_D_SRC -DCMAKE_INSTALL_PREFIX=$INSTALL_DIR && make VERBOSE=1 install"
    DEF_CONFIGURE_BUILD_CMD="$RT_D_SRC/configure --prefix=$INSTALL_DIR"

    [ -f "$RT_D_SRC/Makefile" ]       && BUILD_CMD="$DEF_MAKE_BUILD_CMD" && return 0;
    [ -f "$RT_D_SRC/CMakeLists.txt" ] && BUILD_CMD="$DEF_CMAKE_BUILD_CMD" && return 0;
    [ -f "$RT_D_SRC/configure" ]      && BUILD_CMD="$DEF_CONFIGURE_BUILD_CMD" && return 0;
    return 1;
}

# readall conf files
function cat_all_conf()
{
    cat $XXPM_D_CONF/*.conf 2>/dev/null "$XXPM_F_CONF"
}
function load_conf()
{
    eval $(cat_all_conf | sed -n "/^\[$1\]\$/,/^[ \t]*\$/p" | sed 1d)
}

function eval_pack_env()
{
    # 擦除避免污染
    unset PROJECT
    unset URI
    unset BUILD_CMD
    unset BUILD_IN_SRC
    unset INSTALL_DIR

    # 读取配置文件-1
    PROJECT=$1
    load_conf $1

    # 查漏补缺
    if [ -n "$INSTALL_DIR_NAME" ]; then
        INSTALL_DIR="$XXPM_D_OPT/$INSTALL_DIR_NAME"
    else
        INSTALL_DIR="$XXPM_D_OPT/$PROJECT"
    fi;
    # 重读一次配置文件，解决循环依赖
    load_conf $1

    # 调试
    echo "--PROJECT=$PROJECT"
    echo "--URI=$URI"
    echo "--INSTALL_DIR=$INSTALL_DIR"
    echo "--BUILD_IN_SRC=$BUILD_IN_SRC"
    echo "--BUILD_CMD=$BUILD_CMD"
}

# map opt --> vbox
function map_dir()
{
    installed_home="$1"
    installed_home_name=$(basename $(ls -d "$installed_home"))
    sub_dirs=$(ls "$installed_home")
    for x in $sub_dirs; do
        lnk_dir="$XXPM_D_VBOX/$x"
        verify_dir "$lnk_dir"
        pushd "$lnk_dir" >/dev/null
            lnk_from_dir=../../$(basename "$XXPM_D_OPT")/$installed_home_name/$x
            case "$x" in
                bin)
                    ln -fs $lnk_from_dir/* .
                    ;;
                include)
                    ln -fs $lnk_from_dir/* .
                    ;;
                lib|lib64)
                    ln -fs $lnk_from_dir/*.a .
                    ;;
                *)
                    echo "$lnk_dir PASS"
                    ;;
            esac
        popd >/dev/null
    done
}

# ***********************************************
# sub command area
# ***********************************************
function download()
{
    eval_pack_env "$1"
    verify_src "$URI"
}

# build sth
function install()
{
    download "$1"
    verify_dir "$RT_D_BUILD"
    if [ -d "$RT_D_BUILD" ]; then
        pushd "$RT_D_BUILD" >/dev/null
            verify_build_cmd
            eval "$BUILD_CMD"
        popd >/dev/null
    fi
    # deploy symbol-link
    map_dir "$INSTALL_DIR"
}


# ***********************************************
# main
# ***********************************************
RETVAL=0
CMD="$1"
shift
case "$CMD" in
    download)   download "$1";;
    install)    install  "$1";;
    list)       echo "list" ;;
    uninstall)  echo "uninstall" ;;
    *)
        echo "not support command $CMD"
        RETVAL=-1
        ;;
esac
exit $RETVAL
